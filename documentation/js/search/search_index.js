var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.625,1,1.834]],["body/controllers/AppController.html",[0,2.085,1,2.925,2,2.355,3,0.611,4,0.611,5,0.532,6,3.144,7,3.144,8,3.144,9,0.863,10,0.041,11,2.692,12,3.83,13,0.611,14,2.515,15,3.144,16,3.144,17,2.355,18,1.36,19,3.144,20,3.83,21,0.611,22,0.136,23,1.861,24,3.83,25,2.692,26,2.355,27,3.83,28,0.026,29,0.032,30,0.026]],["title/modules/AppModule.html",[31,1.3,32,1.834]],["body/modules/AppModule.html",[1,2.533,2,2.162,3,0.389,4,0.389,5,0.339,9,0.893,10,0.041,13,0.389,14,2.417,15,2.005,17,1.502,21,0.389,22,0.087,28,0.017,29,0.024,30,0.017,31,1.795,32,3.412,33,1.187,34,1.187,35,1.502,36,1.502,37,1.187,38,2.533,39,1.502,40,2.005,41,2.005,42,2.005,43,2.417,44,2.709,45,2.168,46,2.162,47,1.502,48,1.502,49,2.442,50,2.533,51,2.886,52,1.064,53,2.442,54,3.516,55,4.507,56,0.698,57,2.442,58,3.516,59,2.886,60,3.516,61,1.064,62,1.064,63,0.443,64,0.957,65,2.472,66,1.064,67,1.717,68,2.442,69,2.442,70,3.516,71,3.516,72,2.005,73,1.915,74,1.717,75,2.442,76,2.162,77,2.442,78,1.502,79,2.442,80,2.442,81,2.472,82,2.442,83,2.442,84,2.442,85,2.442,86,2.442,87,2.442,88,1.064,89,2.442,90,3.516,91,3.516,92,2.442,93,2.442]],["title/injectables/AppService.html",[14,1.45,94,0.853]],["body/injectables/AppService.html",[3,0.576,4,0.576,5,0.502,9,0.731,10,0.04,11,2.541,13,0.576,14,2.229,18,1.516,21,0.576,22,0.128,23,1.756,26,2.82,28,0.025,29,0.031,30,0.025,52,1.999,56,1.312,61,1.575,62,1.575,63,0.655,64,1.417,66,1.575,94,1.312,95,1.756,96,2.967,97,0.576,98,3.726,99,2.222,100,2.967,101,3.614,102,3.614,103,1.798,104,1.968,105,2.541,106,3.614,107,3.614,108,4.587,109,1.968,110,3.614]],["title/modules/ApplicationLoggerModule.html",[31,1.3,43,1.45]],["body/modules/ApplicationLoggerModule.html",[3,0.587,4,0.587,5,0.511,9,0.74,10,0.039,13,0.587,18,1.695,21,0.587,22,0.131,28,0.025,29,0.032,30,0.025,31,2.215,33,1.79,34,1.79,35,2.265,36,2.265,37,1.79,38,3.126,39,3.126,43,2.771,46,2.854,47,2.265,48,2.265,111,3.024,112,3.024,113,3.024,114,3.683,115,3.024]],["title/injectables/ApplicationLoggerService.html",[18,0.853,94,0.853]],["body/injectables/ApplicationLoggerService.html",[3,0.666,4,0.666,5,0.58,9,0.666,10,0.039,13,0.666,18,1.435,21,0.666,22,0.148,28,0.028,29,0.034,30,0.028,94,1.435,95,2.031,104,2.928,116,3.43,117,2.732,118,4.118,119,4.179]],["title/controllers/ContentController.html",[0,1.625,50,1.834]],["body/controllers/ContentController.html",[0,1.825,2,1.066,3,0.276,4,0.276,5,0.241,7,1.424,9,0.728,10,0.041,13,0.276,18,0.777,21,0.276,22,0.061,23,0.843,25,1.219,26,1.066,28,0.012,29,0.018,30,0.012,45,1.46,50,1.671,52,1.184,56,0.777,61,0.756,62,0.756,63,0.919,64,0.68,65,1.219,66,1.653,88,1.184,97,0.276,98,1.911,105,1.219,109,2.065,120,1.424,121,2.463,122,2.304,123,2.231,124,2.718,125,2.718,126,2.718,127,3.587,128,3.793,129,1.48,130,1.734,131,2.718,132,2.895,133,2.718,134,1.734,135,3.114,136,2.718,137,2.718,138,1.734,139,2.065,140,2.231,141,2.231,142,3.114,143,3.114,144,2.356,145,2.167,146,1.734,147,2.379,148,1.734,149,3.114,150,2.666,151,2.666,152,3.114,153,2.718,154,1.321,155,1.911,156,1.734,157,2.718,158,2.718,159,3.793,160,2.718,161,2.666,162,2.231,163,2.718,164,3.793,165,2.666,166,3.793,167,2.231,168,1.911,169,1.734,170,1.734,171,2.718,172,1.911,173,1.321,174,1.46,175,3.114,176,1.911,177,1.911,178,1.904,179,1.734,180,1.734,181,1.734,182,1.424,183,3.351,184,4.567,185,1.734,186,0.944,187,1.424,188,0.756,189,1.734,190,1.424,191,1.734,192,1.734,193,1.424,194,1.424,195,1.424,196,1.219,197,1.424,198,1.424,199,1.734,200,1.424,201,1.734,202,2.718,203,3.351,204,1.734,205,1.734,206,1.734,207,1.734,208,1.734]],["title/modules/ContentModule.html",[31,1.3,44,1.625]],["body/modules/ContentModule.html",[3,0.555,4,0.555,5,0.483,9,0.79,10,0.04,13,0.555,21,0.555,22,0.123,28,0.024,29,0.03,30,0.024,31,2.158,33,1.693,34,1.693,35,2.142,36,2.142,37,1.693,38,3.045,39,3.045,43,2.629,44,3.138,45,2.564,46,2.755,47,2.142,48,2.142,51,2.86,182,2.86,209,2.86,210,3.484,211,2.86,212,3.484,213,3.484,214,3.484,215,3.484]],["title/classes/ContentPaginatedDto.html",[22,0.106,147,1.625]],["body/classes/ContentPaginatedDto.html",[3,0.482,4,0.482,5,0.42,9,0.737,10,0.04,21,0.482,22,0.145,28,0.021,29,0.028,30,0.021,56,1.321,63,1.003,97,0.482,103,2.086,121,2.245,122,1.779,129,2.516,147,2.223,165,2.126,168,2.869,176,3.477,177,3.248,186,1.647,216,1.47,217,2.483,218,1.984,219,2.51,220,1.984,221,2.223,222,2.869,223,4.946,224,3.025,225,2.483,226,4.24,227,3.351,228,3.351,229,3.025,230,3.025,231,3.631,232,4.082,233,4.082,234,3.025,235,3.025,236,4.62,237,2.126,238,2.483,239,1.86,240,3.025,241,3.025,242,3.025,243,3.025]],["title/injectables/ContentService.html",[45,1.3,94,0.853]],["body/injectables/ContentService.html",[3,0.321,4,0.136,5,0.119,9,0.634,10,0.042,11,0.6,13,0.136,16,2.701,17,0.525,18,0.694,21,0.136,22,0.03,23,0.415,25,1.705,26,0.924,28,0.024,29,0.01,30,0.006,45,1.057,52,0.655,56,0.941,59,0.701,61,1.205,62,1.434,63,0.828,64,1.084,65,1.057,66,1.673,73,0.465,88,1.057,94,0.43,95,0.415,97,0.136,98,1.057,99,0.525,100,0.701,103,1.652,104,0.465,105,0.6,109,2.235,118,0.701,121,1.934,122,0.655,123,1.234,127,3.369,132,2.313,135,0.701,139,0.465,140,1.234,141,3.151,142,1.653,143,2.503,144,1.416,145,1.525,147,2.167,149,0.701,150,1.705,151,1.416,152,1.991,155,1.057,161,3.212,162,1.653,168,0.6,172,0.6,173,0.415,176,1.705,177,1.416,178,0.878,187,0.701,188,0.878,190,0.701,193,0.701,194,0.701,195,0.701,196,0.6,197,0.701,198,0.701,200,1.234,218,0.731,220,0.731,222,0.6,226,2.27,227,1.653,228,1.653,231,0.6,238,0.701,244,0.701,245,2.014,246,1.503,247,2.425,248,1.503,249,1.503,250,1.503,251,1.503,252,0.854,253,1.503,254,1.344,255,1.503,256,1.503,257,0.854,258,1.503,259,0.854,260,1.7,261,2.27,262,1.653,263,3.291,264,1.991,265,1.503,266,0.854,267,1.503,268,2.014,269,2.023,270,1.057,271,1.503,272,3.151,273,1.503,274,2.425,275,0.854,276,2.425,277,2.765,278,1.503,279,2.143,280,2.014,281,1.503,282,1.503,283,1.503,284,1.503,285,2.014,286,1.653,287,2.014,288,2.014,289,2.014,290,0.465,291,0.6,292,0.854,293,0.6,294,0.854,295,0.854,296,1.503,297,0.701,298,0.854,299,0.701,300,0.701,301,0.854,302,0.854,303,0.854,304,0.854,305,0.701,306,0.854,307,0.854,308,1.234,309,2.263,310,0.854,311,0.854,312,3.291,313,0.854,314,1.503,315,1.503,316,0.854,317,0.854,318,2.765,319,0.854,320,0.854,321,0.854,322,1.503,323,1.503,324,1.503,325,1.057,326,1.705,327,0.854,328,0.854,329,3.049,330,0.854,331,0.854,332,1.503,333,0.854,334,0.854,335,0.854,336,2.014,337,0.854,338,0.854,339,1.503,340,1.503,341,0.854,342,0.854,343,0.854,344,0.701,345,0.854,346,0.854,347,1.234,348,0.854,349,1.991,350,0.6,351,0.854,352,2.014,353,2.014,354,0.854,355,1.503,356,2.014,357,1.653,358,1.503,359,0.854,360,0.854,361,0.854,362,0.854,363,0.854,364,0.854,365,0.854,366,0.854,367,0.854,368,0.854,369,1.503,370,0.854,371,0.701,372,0.465,373,0.854,374,0.854,375,0.854,376,0.854,377,0.854,378,0.854,379,0.854,380,0.854,381,0.854,382,0.854,383,0.854,384,0.854,385,0.854,386,1.234,387,2.425,388,1.503,389,1.344,390,0.854,391,1.057,392,0.854,393,0.854,394,0.819,395,0.854,396,0.701,397,0.854,398,0.854,399,0.854,400,0.854,401,0.854,402,0.854,403,1.096,404,0.465,405,0.465,406,0.415,407,0.854,408,0.854,409,0.854,410,0.854,411,0.854,412,2.014,413,0.854,414,0.854,415,2.765,416,0.854,417,2.014,418,0.854,419,0.854,420,0.854,421,0.854,422,0.854,423,0.854,424,0.854,425,0.854,426,0.854,427,1.503,428,0.854,429,0.701,430,0.854,431,0.854,432,0.854,433,0.854,434,0.854,435,0.854,436,0.854]],["title/classes/FailedExceptionDTO.html",[22,0.106,174,1.3]],["body/classes/FailedExceptionDTO.html",[3,0.371,4,0.371,5,0.323,9,0.542,10,0.04,13,0.371,21,0.639,22,0.142,28,0.016,29,0.023,30,0.016,56,1.481,63,0.958,88,1.015,97,0.371,103,2.224,117,1.85,121,1.651,122,1.481,129,2.82,139,1.85,145,2.302,154,2.378,161,2.82,173,2.278,174,1.481,178,1.015,186,1.269,188,2.043,216,1.132,218,1.651,219,3.009,220,1.651,221,1.85,225,4.018,239,1.433,254,2.278,270,1.481,290,1.269,325,2.389,326,1.638,372,1.85,389,2.278,394,2.752,396,1.913,403,2.184,404,2.553,405,2.184,406,1.949,437,1.433,438,2.33,439,2.33,440,2.389,441,2.33,442,2.33,443,2.33,444,2.389,445,2.33,446,2.33,447,3.398,448,2.33,449,2.184,450,2.33,451,2.389,452,2.389,453,1.638,454,2.82,455,1.638,456,1.638]],["title/classes/FailedResponseDTO.html",[22,0.106,188,1.3]],["body/classes/FailedResponseDTO.html",[3,0.466,4,0.466,5,0.406,9,0.636,10,0.039,13,0.466,21,0.724,22,0.161,28,0.02,29,0.027,30,0.02,56,1.141,63,0.723,88,1.274,97,0.466,103,2.207,117,1.592,121,1.939,122,1.738,129,2.172,139,1.592,145,2.392,154,2.561,173,1.939,174,1.274,178,1.274,186,1.592,188,1.979,216,1.421,218,1.939,219,3.24,220,1.421,221,2.172,239,1.798,254,1.939,270,1.274,290,1.592,325,2.804,372,2.172,389,2.481,394,2.656,403,2.472,404,2.172,405,1.592,406,1.421,437,1.798,440,2.055,444,2.055,449,2.472,451,2.804,452,2.804,453,2.055,454,3.192,455,2.055,456,2.055,457,2.924,458,2.924]],["title/classes/HttpErrorFilter.html",[22,0.106,73,1.625]],["body/classes/HttpErrorFilter.html",[3,0.385,4,0.385,5,0.336,9,0.715,10,0.041,13,0.385,18,1.283,19,1.985,21,0.385,22,0.086,23,1.175,28,0.016,29,0.024,30,0.016,52,1.521,56,0.998,61,1.521,62,1.521,63,0.633,64,1.368,66,1.054,67,1.699,73,1.901,74,2.88,97,0.385,99,1.486,104,1.316,145,2.073,154,1.175,172,3.154,173,1.175,174,1.521,216,1.175,254,1.175,269,1.486,270,1.054,290,1.316,309,3.048,326,2.454,371,1.985,386,3.683,389,2.63,391,1.699,394,1.901,403,1.316,404,1.316,405,1.316,406,1.175,459,1.985,460,2.454,461,4.757,462,1.985,463,2.418,464,2.865,465,3.49,466,4.097,467,4.486,468,2.418,469,2.418,470,2.418,471,2.418,472,2.418,473,2.418,474,2.418,475,2.418,476,3.49,477,2.418,478,3.49,479,3.49,480,3.49,481,3.49,482,2.418,483,2.418,484,2.418,485,2.418,486,2.418,487,4.097,488,4.097,489,2.418,490,3.49,491,3.49,492,3.49,493,2.418,494,2.418,495,2.418]],["title/injectables/LoggerInterceptor.html",[76,1.834,94,0.853]],["body/injectables/LoggerInterceptor.html",[3,0.459,4,0.459,5,0.4,9,0.773,10,0.041,13,0.459,18,1.386,21,0.459,22,0.102,23,1.4,28,0.02,29,0.027,30,0.02,52,1.721,56,1.129,61,1.721,62,1.721,63,0.716,64,1.547,66,1.255,76,2.428,94,1.129,95,1.4,97,0.459,99,1.771,109,1.568,115,2.364,175,3.698,196,2.775,254,1.919,270,1.255,286,3.698,305,3.241,309,2.98,460,2.025,462,2.364,464,3.241,496,2.364,497,4.505,498,2.88,499,2.88,500,4.847,501,4.847,502,2.88,503,4.505,504,3.948,505,2.364,506,3.948,507,2.88,508,2.88,509,2.88,510,3.948,511,2.364,512,2.88,513,2.88,514,2.88,515,2.88,516,2.88,517,2.88,518,2.88,519,2.364,520,2.88,521,2.88,522,2.88]],["title/injectables/ReqestMiddleware.html",[78,1.834,94,0.853]],["body/injectables/ReqestMiddleware.html",[3,0.542,4,0.542,5,0.472,9,0.78,10,0.041,13,0.542,21,0.542,22,0.12,28,0.023,29,0.03,30,0.023,52,1.921,56,0.972,61,1.481,62,1.481,63,0.799,64,1.332,66,1.481,67,2.389,78,2.711,94,1.261,95,1.651,97,0.542,103,1.332,154,2.517,260,3.009,270,1.921,406,1.651,460,2.389,511,2.789,519,2.789,523,2.389,524,4.409,525,4.409,526,4.252,527,4.894,528,5.179,529,3.398,530,4.409,531,2.789,532,3.398,533,4.894]],["title/classes/SuccessResponseDTO.html",[22,0.106,178,1.3]],["body/classes/SuccessResponseDTO.html",[3,0.47,4,0.47,5,0.409,9,0.64,10,0.039,13,0.47,21,0.727,22,0.162,28,0.02,29,0.027,30,0.02,56,1.148,63,0.728,88,1.286,97,0.47,103,2.156,117,1.607,121,2.489,122,1.749,129,2.186,139,1.607,145,2.397,154,2.568,167,3.295,173,1.951,174,1.286,178,1.749,186,1.607,188,1.749,216,1.434,218,1.951,219,3.249,220,1.434,221,1.607,239,1.814,254,1.951,270,1.286,290,1.607,372,2.666,389,1.951,394,2.484,403,2.186,404,2.186,405,1.607,406,1.434,437,1.814,440,2.074,444,2.074,449,2.484,451,2.822,452,2.822,453,2.074,454,3.207,455,2.074,456,2.074,534,2.95,535,2.95]],["title/interfaces/ValidationPipeOptions.html",[536,1.834,537,2.097]],["body/interfaces/ValidationPipeOptions.html",[3,0.568,4,0.568,5,0.494,9,0.724,10,0.04,13,0.568,21,0.568,22,0.126,28,0.024,29,0.031,30,0.024,63,0.907,64,2.182,97,0.568,117,2.474,218,2.208,237,2.503,260,2.794,449,3.032,536,2.19,537,3.194,538,3.561,539,2.923,540,2.923,541,5.004,542,5.271,543,5.271,544,5.271,545,4.544,546,3.561]],["title/coverage.html",[547,2.843]],["body/coverage.html",[0,2.223,1,1.86,5,0.42,6,2.483,10,0.04,14,1.47,18,0.865,22,0.183,28,0.021,29,0.028,30,0.021,37,1.47,45,1.318,50,1.86,63,0.548,73,1.647,74,2.126,76,1.86,78,1.86,81,2.126,94,1.477,96,2.483,116,2.483,120,2.483,147,1.647,174,1.318,178,1.318,188,1.318,217,2.483,244,2.483,260,1.86,269,1.86,291,2.126,293,2.126,350,4.117,437,2.841,459,2.483,496,2.483,523,2.126,536,1.86,537,2.126,539,2.483,540,2.483,547,2.126,548,3.025,549,3.025,550,3.025,551,5.322,552,5.165,553,3.025,554,3.025,555,4.082,556,3.025,557,3.025,558,2.483,559,2.483,560,4.62,561,3.025,562,3.025,563,2.483,564,2.483,565,3.025,566,3.025]],["title/dependencies.html",[34,1.74,567,2.505]],["body/dependencies.html",[10,0.041,13,0.536,17,2.067,22,0.155,28,0.023,29,0.03,30,0.023,34,1.634,72,2.76,132,3.078,237,2.364,264,2.76,297,2.76,505,2.76,531,2.76,568,4.869,569,3.362,570,3.362,571,4.869,572,3.362,573,3.362,574,3.362,575,3.362,576,3.362,577,3.362,578,3.362,579,3.362,580,3.362,581,3.362,582,3.362,583,3.362,584,2.76,585,3.362,586,2.76,587,3.362,588,3.997,589,3.362,590,2.76,591,3.362,592,3.362,593,3.362,594,4.379,595,3.362,596,3.362,597,3.362,598,3.362,599,3.362,600,3.362,601,3.362,602,3.362,603,2.76,604,3.362]],["title/miscellaneous/enumerations.html",[605,0.982,606,2.939]],["body/miscellaneous/enumerations.html",[10,0.039,28,0.03,29,0.035,30,0.03,97,0.696,150,3.071,151,3.071,231,3.621,279,3.071,605,1.712,606,3.586,607,4.368,608,4.368,609,4.229,610,4.368]],["title/miscellaneous/functions.html",[605,0.982,611,2.939]],["body/miscellaneous/functions.html",[10,0.036,28,0.031,29,0.036,30,0.031,37,2.698,97,0.719,558,3.703,605,1.768,611,3.703,612,4.511]],["title/index.html",[97,0.399,613,2.505,614,2.505]],["body/index.html",[8,2.676,10,0.04,28,0.022,29,0.029,30,0.022,104,1.775,122,1.421,155,2.292,165,2.292,262,3.522,279,2.292,344,3.522,391,2.292,547,2.292,584,2.676,586,3.522,588,2.676,590,2.676,603,2.676,615,4.291,616,3.26,617,3.26,618,4.291,619,3.26,620,4.291,621,3.26,622,3.26,623,4.291,624,3.26,625,3.26,626,3.26,627,4.797,628,3.26,629,3.26,630,3.26,631,3.26,632,3.26,633,5.543,634,3.26,635,5.437,636,3.26,637,4.291,638,3.26,639,3.26,640,3.26,641,3.26,642,4.291,643,3.26,644,3.26,645,3.26,646,3.26,647,3.26,648,3.26,649,3.26,650,3.26,651,3.26,652,3.26,653,3.26,654,3.26]],["title/modules.html",[33,1.965]],["body/modules.html",[10,0.035,28,0.03,29,0.035,30,0.03,32,2.674,33,2.113,43,2.113,44,2.368,655,5.468,656,5.468,657,5.468,658,5.468]],["title/overview.html",[659,3.32]],["body/overview.html",[2,2.06,10,0.04,14,2.362,18,1.596,28,0.023,29,0.03,30,0.023,31,1.46,32,3.549,33,1.628,34,1.628,35,2.06,36,2.06,37,1.628,38,2.06,39,2.06,40,2.751,41,2.751,42,2.751,43,2.712,44,3.081,45,2.466,46,2.686,47,2.06,48,2.06,95,1.628,111,2.751,112,2.751,113,2.751,209,2.751,211,2.751,216,1.628,222,2.355,536,2.06,659,2.751,660,3.351,661,3.351,662,4.369]],["title/miscellaneous/typealiases.html",[605,0.982,663,3.581]],["body/miscellaneous/typealiases.html",[10,0.037,28,0.028,29,0.034,30,0.028,63,0.975,97,0.666,144,3.779,299,4.414,300,4.118,523,2.937,526,4.118,605,1.638,664,4.179,665,4.179,666,5.376,667,4.179,668,5.017]],["title/miscellaneous/variables.html",[605,0.982,669,2.939]],["body/miscellaneous/variables.html",[10,0.041,28,0.02,29,0.027,30,0.02,63,0.532,81,2.81,88,1.742,97,0.467,103,1.567,109,2.177,145,1.982,220,1.425,221,2.476,261,3.281,269,2.458,272,2.407,291,2.81,293,2.81,308,2.407,309,1.803,347,2.407,349,3.733,350,2.81,357,3.733,372,1.597,389,1.943,429,2.407,449,1.597,559,2.407,563,2.407,564,2.407,605,1.149,609,4.195,669,2.407,670,2.932,671,2.932,672,2.932,673,2.932,674,2.932,675,2.932,676,2.932,677,2.932,678,2.932,679,2.932,680,2.932,681,2.932,682,2.932,683,2.932,684,2.932,685,2.932,686,2.932,687,2.932,688,2.932,689,2.932,690,2.932,691,2.932,692,2.932,693,3.997,694,2.932,695,2.932,696,2.932,697,2.932,698,2.932,699,2.932,700,2.932,701,2.932,702,2.932,703,2.932,704,2.932,705,2.932]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":350,"title":{},"body":{"injectables/ContentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["0.19.2",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":222,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"overview.html":{}}}],["1.0.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["1.2.8",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":661,"title":{},"body":{"overview.html":{}}}],["2.4.2",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":135,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["3",{"_index":660,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":166,"title":{},"body":{"controllers/ContentController.html":{}}}],["403",{"_index":157,"title":{},"body":{"controllers/ContentController.html":{}}}],["404",{"_index":160,"title":{},"body":{"controllers/ContentController.html":{}}}],["422",{"_index":163,"title":{},"body":{"controllers/ContentController.html":{}}}],["5",{"_index":662,"title":{},"body":{"overview.html":{}}}],["5/8",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["5005",{"_index":477,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["6.5.4",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["62",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["9]{1",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["above",{"_index":629,"title":{},"body":{"index.html":{}}}],["adding",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["against",{"_index":233,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["agent",{"_index":418,"title":{},"body":{"injectables/ContentService.html":{}}}],["aliases",{"_index":664,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":155,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"index.html":{}}}],["api",{"_index":161,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{}}}],["apioperation",{"_index":183,"title":{},"body":{"controllers/ContentController.html":{}}}],["apiproperty",{"_index":239,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["apiproperty({description",{"_index":225,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{}}}],["apiproperty({description:\"api",{"_index":454,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["apiproperty({description:\"exception",{"_index":456,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["apiproperty({description:\"http",{"_index":453,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["apiproperty({description:\"search",{"_index":243,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["apiproperty({description:\"unique",{"_index":455,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["apiproperty({enum",{"_index":232,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["apiproperty({type",{"_index":219,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["apiresponse",{"_index":184,"title":{},"body":{"controllers/ContentController.html":{}}}],["apitags",{"_index":185,"title":{},"body":{"controllers/ContentController.html":{}}}],["apitags('content",{"_index":191,"title":{},"body":{"controllers/ContentController.html":{}}}],["apiutil",{"_index":293,"title":{},"body":{"injectables/ContentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiutil[type",{"_index":427,"title":{},"body":{"injectables/ContentService.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["app.controller",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["append",{"_index":338,"title":{},"body":{"injectables/ContentService.html":{}}}],["appending",{"_index":342,"title":{},"body":{"injectables/ContentService.html":{}}}],["applicationlogger",{"_index":464,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["applicationloggermodule",{"_index":43,"title":{"modules/ApplicationLoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"modules.html":{},"overview.html":{}}}],["applicationloggerservice",{"_index":18,"title":{"injectables/ApplicationLoggerService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["applogger",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["apply(reqestmiddleware",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":14,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":467,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["arr",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr.foreach(link",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":274,"title":{},"body":{"injectables/ContentService.html":{}}}],["async",{"_index":127,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["authentication",{"_index":623,"title":{},"body":{"index.html":{}}}],["author",{"_index":647,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":414,"title":{},"body":{"injectables/ContentService.html":{}}}],["authrization",{"_index":624,"title":{},"body":{"index.html":{}}}],["available",{"_index":133,"title":{},"body":{"controllers/ContentController.html":{}}}],["await",{"_index":318,"title":{},"body":{"injectables/ContentService.html":{}}}],["axios",{"_index":264,"title":{},"body":{"injectables/ContentService.html":{},"dependencies.html":{}}}],["axios.request",{"_index":323,"title":{},"body":{"injectables/ContentService.html":{}}}],["backend",{"_index":344,"title":{},"body":{"injectables/ContentService.html":{},"index.html":{}}}],["base",{"_index":281,"title":{},"body":{"injectables/ContentService.html":{}}}],["based",{"_index":262,"title":{},"body":{"injectables/ContentService.html":{},"index.html":{}}}],["baseurl",{"_index":324,"title":{},"body":{"injectables/ContentService.html":{}}}],["beautify",{"_index":393,"title":{},"body":{"injectables/ContentService.html":{}}}],["body",{"_index":175,"title":{},"body":{"controllers/ContentController.html":{},"injectables/LoggerInterceptor.html":{}}}],["boolean",{"_index":449,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":658,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":655,"title":{},"body":{"modules.html":{}}}],["built",{"_index":392,"title":{},"body":{"injectables/ContentService.html":{}}}],["cache",{"_index":141,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["cachecontent",{"_index":246,"title":{},"body":{"injectables/ContentService.html":{}}}],["cachecontent(key",{"_index":251,"title":{},"body":{"injectables/ContentService.html":{}}}],["cached",{"_index":153,"title":{},"body":{"controllers/ContentController.html":{}}}],["cacheresult",{"_index":317,"title":{},"body":{"injectables/ContentService.html":{}}}],["cacheresult.data",{"_index":321,"title":{},"body":{"injectables/ContentService.html":{}}}],["cacheresult.status",{"_index":320,"title":{},"body":{"injectables/ContentService.html":{}}}],["call",{"_index":286,"title":{},"body":{"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{}}}],["call$.handle().pipe",{"_index":517,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["callhandler",{"_index":501,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["calls",{"_index":346,"title":{},"body":{"injectables/ContentService.html":{}}}],["catch",{"_index":386,"title":{},"body":{"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{}}}],["catch(err",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch(exception",{"_index":465,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["check",{"_index":315,"title":{},"body":{"injectables/ContentService.html":{}}}],["child_process",{"_index":470,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["class",{"_index":22,"title":{"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":216,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{},"overview.html":{}}}],["clear",{"_index":140,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["clearcache",{"_index":247,"title":{},"body":{"injectables/ContentService.html":{}}}],["clearcontent",{"_index":128,"title":{},"body":{"controllers/ContentController.html":{}}}],["cleared",{"_index":136,"title":{},"body":{"controllers/ContentController.html":{}}}],["clears",{"_index":131,"title":{},"body":{"controllers/ContentController.html":{}}}],["client",{"_index":245,"title":{},"body":{"injectables/ContentService.html":{}}}],["clientproxy",{"_index":289,"title":{},"body":{"injectables/ContentService.html":{}}}],["clientproxyfactory",{"_index":295,"title":{},"body":{"injectables/ContentService.html":{}}}],["clientproxyfactory.create",{"_index":302,"title":{},"body":{"injectables/ContentService.html":{}}}],["cluster_applicationloggermodule",{"_index":111,"title":{},"body":{"modules/ApplicationLoggerModule.html":{},"overview.html":{}}}],["cluster_applicationloggermodule_exports",{"_index":112,"title":{},"body":{"modules/ApplicationLoggerModule.html":{},"overview.html":{}}}],["cluster_applicationloggermodule_providers",{"_index":113,"title":{},"body":{"modules/ApplicationLoggerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_contentmodule",{"_index":209,"title":{},"body":{"modules/ContentModule.html":{},"overview.html":{}}}],["cluster_contentmodule_exports",{"_index":211,"title":{},"body":{"modules/ContentModule.html":{},"overview.html":{}}}],["cluster_contentmodule_imports",{"_index":210,"title":{},"body":{"modules/ContentModule.html":{}}}],["cluster_contentmodule_providers",{"_index":212,"title":{},"body":{"modules/ContentModule.html":{}}}],["code",{"_index":173,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}}}],["component",{"_index":628,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/ContentService.html":{}}}],["configuration",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":309,"title":{},"body":{"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["constructfinalapi",{"_index":248,"title":{},"body":{"injectables/ContentService.html":{}}}],["constructfinalapi(params",{"_index":258,"title":{},"body":{"injectables/ContentService.html":{}}}],["constructor",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["constructor(applicationlogger",{"_index":462,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["constructor(applogger",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"injectables/ContentService.html":{}}}],["constructor(private",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["consumed",{"_index":373,"title":{},"body":{"injectables/ContentService.html":{}}}],["consumer",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["consumer'})@apiresponse({status",{"_index":134,"title":{},"body":{"controllers/ContentController.html":{}}}],["content",{"_index":121,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["content'})@isnotempty()@isstring",{"_index":229,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["content.dto",{"_index":187,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["content.service",{"_index":182,"title":{},"body":{"controllers/ContentController.html":{},"modules/ContentModule.html":{}}}],["contentcontroller",{"_index":50,"title":{"controllers/ContentController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ContentController.html":{},"coverage.html":{}}}],["contentmodule",{"_index":44,"title":{"modules/ContentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContentModule.html":{},"modules.html":{},"overview.html":{}}}],["contentpaginateddto",{"_index":147,"title":{"classes/ContentPaginatedDto.html":{}},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"coverage.html":{}}}],["contentservice",{"_index":45,"title":{"injectables/ContentService.html":{}},"body":{"modules/AppModule.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"coverage.html":{},"overview.html":{}}}],["context",{"_index":196,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{}}}],["context.getclass().name",{"_index":522,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":512,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ContentController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ContentController.html":{},"coverage.html":{}}}],["controller('app",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('content",{"_index":192,"title":{},"body":{"controllers/ContentController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ContentController.html":{},"overview.html":{}}}],["contruct",{"_index":310,"title":{},"body":{"injectables/ContentService.html":{}}}],["coverage",{"_index":547,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crypto",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":472,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.getrequest",{"_index":474,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.getresponse",{"_index":475,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["custom",{"_index":391,"title":{},"body":{"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"index.html":{}}}],["customreq",{"_index":526,"title":{},"body":{"injectables/ReqestMiddleware.html":{},"miscellaneous/typealiases.html":{}}}],["data",{"_index":272,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["data.split",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().tolocalestring",{"_index":486,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["date.now",{"_index":510,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["db_database",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_host",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_password",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_port",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_type",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_username",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":198,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["declarations",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["decorators",{"_index":129,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["defacto",{"_index":654,"title":{},"body":{"index.html":{}}}],["default",{"_index":221,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{}}}],["delete",{"_index":181,"title":{},"body":{"controllers/ContentController.html":{}}}],["delete('/clearcache",{"_index":207,"title":{},"body":{"controllers/ContentController.html":{}}}],["delete('/clearcache')@apioperation({summary",{"_index":130,"title":{},"body":{"controllers/ContentController.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":122,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"index.html":{}}}],["description:\"entity",{"_index":241,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["description:\"failed",{"_index":452,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["description:\"page",{"_index":240,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["description:\"successful",{"_index":451,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["destructure",{"_index":331,"title":{},"body":{"injectables/ContentService.html":{}}}],["details",{"_index":277,"title":{},"body":{"injectables/ContentService.html":{}}}],["development",{"_index":620,"title":{},"body":{"index.html":{}}}],["disableerrormessages",{"_index":542,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["documentation",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":282,"title":{},"body":{"injectables/ContentService.html":{}}}],["done",{"_index":343,"title":{},"body":{"injectables/ContentService.html":{}}}],["dto/response.dto",{"_index":471,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["e2e",{"_index":643,"title":{},"body":{"index.html":{}}}],["each",{"_index":278,"title":{},"body":{"injectables/ContentService.html":{}}}],["econtenttype",{"_index":231,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"miscellaneous/enumerations.html":{}}}],["econtenttype.respository",{"_index":429,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["econtenttype.user",{"_index":347,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["emitter",{"_index":378,"title":{},"body":{"injectables/ContentService.html":{}}}],["end",{"_index":400,"title":{},"body":{"injectables/ContentService.html":{}}}],["endpoint",{"_index":139,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["entity",{"_index":165,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"index.html":{}}}],["enumerations",{"_index":606,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":387,"title":{},"body":{"injectables/ContentService.html":{}}}],["err.message",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":389,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["error(\"request",{"_index":330,"title":{},"body":{"injectables/ContentService.html":{}}}],["error(\"type",{"_index":433,"title":{},"body":{"injectables/ContentService.html":{}}}],["error(err.message",{"_index":426,"title":{},"body":{"injectables/ContentService.html":{}}}],["error.util",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["error.util.ts",{"_index":459,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.util.ts:12",{"_index":468,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["error.util.ts:7",{"_index":463,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errorresponseobject",{"_index":485,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errors",{"_index":546,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["example",{"_index":402,"title":{},"body":{"injectables/ContentService.html":{}}}],["examples",{"_index":631,"title":{},"body":{"index.html":{}}}],["exception",{"_index":326,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/HttpErrorFilter.html":{}}}],["exception.getresponse",{"_index":479,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.getstatus",{"_index":476,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message",{"_index":491,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.stack",{"_index":493,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exceptionfactory",{"_index":543,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["exceptionfilter",{"_index":461,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exceptionresponse",{"_index":478,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exceptionresponse.error",{"_index":482,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exceptionresponse.message",{"_index":484,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exec",{"_index":469,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["executioncontext",{"_index":500,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["exist",{"_index":316,"title":{},"body":{"injectables/ContentService.html":{}}}],["exists",{"_index":354,"title":{},"body":{"injectables/ContentService.html":{}}}],["export",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["express",{"_index":531,"title":{},"body":{"injectables/ReqestMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":117,"title":{},"body":{"injectables/ApplicationLoggerService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["extra",{"_index":339,"title":{},"body":{"injectables/ContentService.html":{}}}],["failed",{"_index":325,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{}}}],["failedexceptiondto",{"_index":174,"title":{"classes/FailedExceptionDTO.html":{}},"body":{"controllers/ContentController.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{},"coverage.html":{}}}],["failedresponsedto",{"_index":188,"title":{"classes/FailedResponseDTO.html":{}},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"coverage.html":{}}}],["failedresponsedto:17",{"_index":450,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["failedresponsedto:20",{"_index":448,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["false",{"_index":403,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}}}],["features",{"_index":616,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":149,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["fetchcontent",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["fetchcontent(@body",{"_index":205,"title":{},"body":{"controllers/ContentController.html":{}}}],["fetchcontent(body",{"_index":146,"title":{},"body":{"controllers/ContentController.html":{}}}],["fetchcontent(params",{"_index":265,"title":{},"body":{"injectables/ContentService.html":{}}}],["fetched",{"_index":168,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["fetching",{"_index":267,"title":{},"body":{"injectables/ContentService.html":{}}}],["fetchuserdetails",{"_index":249,"title":{},"body":{"injectables/ContentService.html":{}}}],["fetchuserdetails(items",{"_index":273,"title":{},"body":{"injectables/ContentService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["final",{"_index":261,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["final[0].split(\"=\")[1",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finalapi",{"_index":312,"title":{},"body":{"injectables/ContentService.html":{}}}],["find",{"_index":255,"title":{},"body":{"injectables/ContentService.html":{}}}],["finding",{"_index":365,"title":{},"body":{"injectables/ContentService.html":{}}}],["fire",{"_index":380,"title":{},"body":{"injectables/ContentService.html":{}}}],["forbidden",{"_index":158,"title":{},"body":{"controllers/ContentController.html":{}}}],["forget",{"_index":381,"title":{},"body":{"injectables/ContentService.html":{}}}],["formatted",{"_index":398,"title":{},"body":{"injectables/ContentService.html":{}}}],["forroutes",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":162,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["function",{"_index":260,"title":{},"body":{"injectables/ContentService.html":{},"injectables/ReqestMiddleware.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["functions",{"_index":611,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gaurd",{"_index":625,"title":{},"body":{"index.html":{}}}],["getting",{"_index":613,"title":{"index.html":{}},"body":{}}],["gettotalpages",{"_index":291,"title":{},"body":{"injectables/ContentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettotalpages(result.headers.link",{"_index":362,"title":{},"body":{"injectables/ContentService.html":{}}}],["ghosh",{"_index":649,"title":{},"body":{"index.html":{}}}],["github",{"_index":152,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["handled",{"_index":397,"title":{},"body":{"injectables/ContentService.html":{}}}],["handling",{"_index":124,"title":{},"body":{"controllers/ContentController.html":{}}}],["headers",{"_index":417,"title":{},"body":{"injectables/ContentService.html":{}}}],["headers['authorization",{"_index":420,"title":{},"body":{"injectables/ContentService.html":{}}}],["hello",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":253,"title":{},"body":{"injectables/ContentService.html":{}}}],["hence",{"_index":336,"title":{},"body":{"injectables/ContentService.html":{}}}],["host",{"_index":466,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["host.switchtohttp",{"_index":473,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["http",{"_index":396,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{}}}],["httperrorfilter",{"_index":73,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/AppModule.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":172,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{}}}],["httpexception(`error",{"_index":407,"title":{},"body":{"injectables/ContentService.html":{}}}],["https://api.github.com/search/repositories",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.github.com/search/users",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":290,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}}}],["httpstatus.bad_request",{"_index":408,"title":{},"body":{"injectables/ContentService.html":{}}}],["httpstatus.internal_server_error",{"_index":490,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["httpstatus.ok",{"_index":328,"title":{},"body":{"injectables/ContentService.html":{}}}],["id",{"_index":444,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["identifier",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["if(exceptionresponse.message",{"_index":483,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["igenericfailureresponse",{"_index":299,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/typealiases.html":{}}}],["igenericresponse",{"_index":300,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/typealiases.html":{}}}],["igenericsuccessresponse",{"_index":144,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"miscellaneous/typealiases.html":{}}}],["implement",{"_index":367,"title":{},"body":{"injectables/ContentService.html":{}}}],["implementation",{"_index":630,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":242,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["implemented'})@isnotempty",{"_index":234,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["implements",{"_index":460,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["import",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/ContentModule.html":{}}}],["imports:[applicationloggermodule",{"_index":215,"title":{},"body":{"modules/ContentModule.html":{}}}],["index",{"_index":97,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infinite",{"_index":368,"title":{},"body":{"injectables/ContentService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["information",{"_index":284,"title":{},"body":{"injectables/ContentService.html":{}}}],["inherited",{"_index":447,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["inject",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ContentService.html":{}}}],["injectable",{"_index":94,"title":{"injectables/AppService.html":{},"injectables/ApplicationLoggerService.html":{},"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}},"body":{"injectables/AppService.html":{},"injectables/ApplicationLoggerService.html":{},"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"coverage.html":{}}}],["injectables",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"injectables/ApplicationLoggerService.html":{},"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"overview.html":{}}}],["innerregex",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["installation",{"_index":632,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":634,"title":{},"body":{"index.html":{}}}],["integration",{"_index":626,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":497,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["intercept(context",{"_index":499,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["interface",{"_index":536,"title":{"interfaces/ValidationPipeOptions.html":{}},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":538,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["internal",{"_index":480,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["isglobal",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":236,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["isstring",{"_index":223,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["item",{"_index":285,"title":{},"body":{"injectables/ContentService.html":{}}}],["item.detailinfo",{"_index":424,"title":{},"body":{"injectables/ContentService.html":{}}}],["item.url",{"_index":423,"title":{},"body":{"injectables/ContentService.html":{}}}],["items",{"_index":288,"title":{},"body":{"injectables/ContentService.html":{}}}],["items.map(async",{"_index":422,"title":{},"body":{"injectables/ContentService.html":{}}}],["json.parse(data",{"_index":413,"title":{},"body":{"injectables/ContentService.html":{}}}],["json.stringify(body",{"_index":515,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["json.stringify(content",{"_index":385,"title":{},"body":{"injectables/ContentService.html":{}}}],["json.stringify(errorresponseobject",{"_index":494,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["jwt",{"_index":590,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["key",{"_index":227,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["legend",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["license",{"_index":650,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":653,"title":{},"body":{"index.html":{}}}],["link",{"_index":352,"title":{},"body":{"injectables/ContentService.html":{}}}],["literal",{"_index":668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["location",{"_index":283,"title":{},"body":{"injectables/ContentService.html":{}}}],["log",{"_index":388,"title":{},"body":{"injectables/ContentService.html":{}}}],["logger",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"injectables/ApplicationLoggerService.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"index.html":{}}}],["logger.service",{"_index":115,"title":{},"body":{"modules/ApplicationLoggerModule.html":{},"injectables/LoggerInterceptor.html":{}}}],["logger/logger.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger.service",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["loggerinterceptor",{"_index":76,"title":{"injectables/LoggerInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerInterceptor.html":{},"coverage.html":{}}}],["logging",{"_index":195,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["made",{"_index":271,"title":{},"body":{"injectables/ContentService.html":{}}}],["make",{"_index":322,"title":{},"body":{"injectables/ContentService.html":{}}}],["mariadb",{"_index":584,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["matching",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":394,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}}}],["metadata",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":254,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"classes/SuccessResponseDTO.html":{}}}],["methods",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["middleware",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContentService.html":{}}}],["middlewareconsumer",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":605,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":652,"title":{},"body":{"index.html":{}}}],["mode",{"_index":637,"title":{},"body":{"index.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":332,"title":{},"body":{"injectables/ContentService.html":{}}}],["name",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["needs",{"_index":333,"title":{},"body":{"injectables/ContentService.html":{}}}],["nest",{"_index":651,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":504,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["nestjs",{"_index":586,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ContentService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":297,"title":{},"body":{"injectables/ContentService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":186,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["nestjs/typeorm",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":530,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["new",{"_index":269,"title":{},"body":{"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":528,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["nfinal",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":341,"title":{},"body":{"injectables/ContentService.html":{}}}],["now",{"_index":509,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["now}ms",{"_index":521,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["npm",{"_index":633,"title":{},"body":{"index.html":{}}}],["null",{"_index":436,"title":{},"body":{"injectables/ContentService.html":{}}}],["number",{"_index":220,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.db_port",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nvalue",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nvalue.match(innerregex",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":372,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":503,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["optional",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["options",{"_index":304,"title":{},"body":{"injectables/ContentService.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["overview",{"_index":659,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":567,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":176,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["pages",{"_index":357,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["paginated",{"_index":355,"title":{},"body":{"injectables/ContentService.html":{}}}],["param",{"_index":200,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["parameters",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["params",{"_index":263,"title":{},"body":{"injectables/ContentService.html":{}}}],["parse",{"_index":360,"title":{},"body":{"injectables/ContentService.html":{}}}],["parsed",{"_index":358,"title":{},"body":{"injectables/ContentService.html":{}}}],["parseint(nfinal",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":337,"title":{},"body":{"injectables/ContentService.html":{}}}],["passport",{"_index":588,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["path",{"_index":405,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}}}],["pattern",{"_index":379,"title":{},"body":{"injectables/ContentService.html":{}}}],["per",{"_index":432,"title":{},"body":{"injectables/ContentService.html":{}}}],["plugged",{"_index":617,"title":{},"body":{"index.html":{}}}],["point",{"_index":401,"title":{},"body":{"injectables/ContentService.html":{}}}],["post",{"_index":179,"title":{},"body":{"controllers/ContentController.html":{}}}],["post('/fetch",{"_index":201,"title":{},"body":{"controllers/ContentController.html":{}}}],["post('/fetch')@apioperation({summary",{"_index":148,"title":{},"body":{"controllers/ContentController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/ContentController.html":{}}}],["prepare",{"_index":371,"title":{},"body":{"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{}}}],["prepared",{"_index":376,"title":{},"body":{"injectables/ContentService.html":{}}}],["present",{"_index":142,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["process.env.db_database",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_type",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_server",{"_index":306,"title":{},"body":{"injectables/ContentService.html":{}}}],["production",{"_index":639,"title":{},"body":{"index.html":{}}}],["profile",{"_index":340,"title":{},"body":{"injectables/ContentService.html":{}}}],["profile.data",{"_index":425,"title":{},"body":{"injectables/ContentService.html":{}}}],["project",{"_index":621,"title":{},"body":{"index.html":{}}}],["promise",{"_index":143,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["promise((resolve",{"_index":409,"title":{},"body":{"injectables/ContentService.html":{}}}],["promise.all",{"_index":421,"title":{},"body":{"injectables/ContentService.html":{}}}],["properties",{"_index":218,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["provide",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["q=${searchkey}&page=${parseint(page",{"_index":430,"title":{},"body":{"injectables/ContentService.html":{}}}],["q=${searchkey}+type:user&page=${parseint(page",{"_index":428,"title":{},"body":{"injectables/ContentService.html":{}}}],["query",{"_index":180,"title":{},"body":{"controllers/ContentController.html":{}}}],["rapid",{"_index":619,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["redis",{"_index":132,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"dependencies.html":{}}}],["redis'})@apiresponse({status",{"_index":156,"title":{},"body":{"controllers/ContentController.html":{}}}],["reference",{"_index":287,"title":{},"body":{"injectables/ContentService.html":{}}}],["reflect",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regex.exec(link",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('rel=\"last",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp(/&page=[0",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":126,"title":{},"body":{"controllers/ContentController.html":{}}}],["repositories",{"_index":151,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"miscellaneous/enumerations.html":{}}}],["req",{"_index":511,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["req.body",{"_index":514,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.method",{"_index":513,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["req.requestid",{"_index":519,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["req.url",{"_index":516,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["reqestmiddleware",{"_index":78,"title":{"injectables/ReqestMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/ReqestMiddleware.html":{},"coverage.html":{}}}],["request",{"_index":270,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{}}}],["request.method",{"_index":488,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["request.requestid",{"_index":489,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["request.url",{"_index":487,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["requestid",{"_index":406,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{}}}],["res",{"_index":527,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}],["resolve",{"_index":412,"title":{},"body":{"injectables/ContentService.html":{}}}],["respond",{"_index":351,"title":{},"body":{"injectables/ContentService.html":{}}}],["response",{"_index":154,"title":{},"body":{"controllers/ContentController.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{}}}],["response.status(404).json(errorresponseobject",{"_index":495,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["responsible",{"_index":123,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["respository",{"_index":610,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["restful",{"_index":440,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{}}}],["result",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.data",{"_index":374,"title":{},"body":{"injectables/ContentService.html":{}}}],["result.headers.link",{"_index":359,"title":{},"body":{"injectables/ContentService.html":{}}}],["result.status",{"_index":327,"title":{},"body":{"injectables/ContentService.html":{}}}],["results",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":280,"title":{},"body":{"injectables/ContentService.html":{}}}],["returns",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{}}}],["rimraf",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["routes",{"_index":125,"title":{},"body":{"controllers/ContentController.html":{}}}],["run",{"_index":635,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":505,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":507,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["same",{"_index":383,"title":{},"body":{"injectables/ContentService.html":{}}}],["sandeep",{"_index":648,"title":{},"body":{"index.html":{}}}],["save",{"_index":375,"title":{},"body":{"injectables/ContentService.html":{}}}],["saved",{"_index":256,"title":{},"body":{"injectables/ContentService.html":{}}}],["scope",{"_index":118,"title":{},"body":{"injectables/ApplicationLoggerService.html":{},"injectables/ContentService.html":{}}}],["scope.transient",{"_index":119,"title":{},"body":{"injectables/ApplicationLoggerService.html":{}}}],["scroll",{"_index":369,"title":{},"body":{"injectables/ContentService.html":{}}}],["search",{"_index":226,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["searcher",{"_index":419,"title":{},"body":{"injectables/ContentService.html":{}}}],["searchkey",{"_index":177,"title":{},"body":{"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["selected",{"_index":311,"title":{},"body":{"injectables/ContentService.html":{}}}],["sent",{"_index":399,"title":{},"body":{"injectables/ContentService.html":{}}}],["sequelize",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["server",{"_index":481,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["set",{"_index":268,"title":{},"body":{"injectables/ContentService.html":{}}}],["setting",{"_index":193,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["shared/dto/response.dto",{"_index":189,"title":{},"body":{"controllers/ContentController.html":{}}}],["shared/interfaces/econtenttype",{"_index":238,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["shared/utils/apitype.util",{"_index":294,"title":{},"body":{"injectables/ContentService.html":{}}}],["shared/utils/totalpages.util",{"_index":292,"title":{},"body":{"injectables/ContentService.html":{}}}],["show",{"_index":334,"title":{},"body":{"injectables/ContentService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ApplicationLoggerModule.html":{},"injectables/ApplicationLoggerService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{}}}],["src/.../apitype.util.ts",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.config.ts",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../econtenttype.ts",{"_index":607,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../igenericresponse.ts",{"_index":666,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":612,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../request.middleware.ts",{"_index":665,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../totalpages.util.ts",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.module.ts:33",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.service.ts",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app/app.service.ts:12",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app/app.service.ts:5",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["src/content/content.controller",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["src/content/content.controller.ts",{"_index":120,"title":{},"body":{"controllers/ContentController.html":{},"coverage.html":{}}}],["src/content/content.controller.ts:44",{"_index":170,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/content/content.controller.ts:58",{"_index":138,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/content/content.dto.ts",{"_index":217,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"coverage.html":{}}}],["src/content/content.dto.ts:13",{"_index":235,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["src/content/content.dto.ts:18",{"_index":230,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["src/content/content.dto.ts:9",{"_index":224,"title":{},"body":{"classes/ContentPaginatedDto.html":{}}}],["src/content/content.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["src/content/content.module.ts",{"_index":213,"title":{},"body":{"modules/ContentModule.html":{}}}],["src/content/content.service",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["src/content/content.service.ts",{"_index":244,"title":{},"body":{"injectables/ContentService.html":{},"coverage.html":{}}}],["src/content/content.service.ts:159",{"_index":252,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/content/content.service.ts:16",{"_index":250,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/content/content.service.ts:180",{"_index":275,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/content/content.service.ts:215",{"_index":259,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/content/content.service.ts:244",{"_index":257,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/content/content.service.ts:41",{"_index":266,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/logger/logger.interceptor",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["src/logger/logger.interceptor.ts",{"_index":496,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"coverage.html":{}}}],["src/logger/logger.interceptor.ts:13",{"_index":498,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["src/logger/logger.interceptor.ts:19",{"_index":502,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["src/logger/logger.module",{"_index":214,"title":{},"body":{"modules/ContentModule.html":{}}}],["src/logger/logger.module.ts",{"_index":114,"title":{},"body":{"modules/ApplicationLoggerModule.html":{}}}],["src/logger/logger.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpErrorFilter.html":{}}}],["src/logger/logger.service.ts",{"_index":116,"title":{},"body":{"injectables/ApplicationLoggerService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":558,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/config/database.config",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["src/shared/config/database.config.ts",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/dto/response.dto",{"_index":298,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/shared/dto/response.dto.ts",{"_index":437,"title":{},"body":{"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"coverage.html":{}}}],["src/shared/dto/response.dto.ts:11",{"_index":534,"title":{},"body":{"classes/SuccessResponseDTO.html":{}}}],["src/shared/dto/response.dto.ts:17",{"_index":458,"title":{},"body":{"classes/FailedResponseDTO.html":{}}}],["src/shared/dto/response.dto.ts:20",{"_index":457,"title":{},"body":{"classes/FailedResponseDTO.html":{}}}],["src/shared/dto/response.dto.ts:26",{"_index":438,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["src/shared/dto/response.dto.ts:29",{"_index":446,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["src/shared/dto/response.dto.ts:32",{"_index":442,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["src/shared/dto/response.dto.ts:35",{"_index":441,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["src/shared/dto/response.dto.ts:38",{"_index":445,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["src/shared/dto/response.dto.ts:41",{"_index":439,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["src/shared/dto/response.dto.ts:8",{"_index":535,"title":{},"body":{"classes/SuccessResponseDTO.html":{}}}],["src/shared/filter/http",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/shared/interfaces/econtenttype.ts",{"_index":608,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/shared/interfaces/igenericresponse",{"_index":190,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["src/shared/interfaces/igenericresponse.ts",{"_index":667,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/middlewares",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["src/shared/middlewares/request.middleware.ts",{"_index":523,"title":{},"body":{"injectables/ReqestMiddleware.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/shared/middlewares/request.middleware.ts:8",{"_index":529,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["src/shared/utils/apitype.util.ts",{"_index":563,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/utils/totalpages.util.ts",{"_index":564,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/validation/class",{"_index":539,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["start",{"_index":618,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":638,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":640,"title":{},"body":{"index.html":{}}}],["started",{"_index":614,"title":{"index.html":{}},"body":{}}],["statements",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":145,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["strategy",{"_index":382,"title":{},"body":{"injectables/ContentService.html":{}}}],["string",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["subscribe((data",{"_index":411,"title":{},"body":{"injectables/ContentService.html":{}}}],["subsequent",{"_index":345,"title":{},"body":{"injectables/ContentService.html":{}}}],["successful",{"_index":167,"title":{},"body":{"controllers/ContentController.html":{},"classes/SuccessResponseDTO.html":{}}}],["successfully",{"_index":137,"title":{},"body":{"controllers/ContentController.html":{}}}],["successresponsedto",{"_index":178,"title":{"classes/SuccessResponseDTO.html":{}},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"coverage.html":{}}}],["summary",{"_index":202,"title":{},"body":{"controllers/ContentController.html":{}}}],["support",{"_index":656,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":657,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":622,"title":{},"body":{"index.html":{}}}],["table",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":353,"title":{},"body":{"injectables/ContentService.html":{}}}],["tap",{"_index":506,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["template",{"_index":615,"title":{},"body":{"index.html":{}}}],["test",{"_index":627,"title":{},"body":{"index.html":{}}}],["test:covstay",{"_index":645,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":644,"title":{},"body":{"index.html":{}}}],["tests",{"_index":642,"title":{},"body":{"index.html":{}}}],["this.applicationlogger.error",{"_index":492,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["this.applicationlogger.log",{"_index":518,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["this.applicationlogger.setcontext('loggerinterceptor",{"_index":508,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["this.applogger.error('exception",{"_index":364,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.applogger.error(`error",{"_index":395,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.applogger.log('print",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["this.applogger.setcontext('appcontroller",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["this.applogger.setcontext('appservice",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["this.applogger.setcontext('contentcontroller",{"_index":199,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.applogger.setcontext('contentservice",{"_index":307,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.cachecontent(finalapi",{"_index":319,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.client",{"_index":301,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.client.emit('cachecontent",{"_index":384,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.client.emit('clearcache",{"_index":435,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.client.send('fetchcontent",{"_index":410,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.configservice.get(\"auth_token",{"_index":416,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.constructfinalapi(params",{"_index":313,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.contentservice.clearcache",{"_index":208,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.contentservice.fetchcontent({...body",{"_index":206,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.fetchuserdetails(data.items",{"_index":348,"title":{},"body":{"injectables/ContentService.html":{}}}],["throw",{"_index":329,"title":{},"body":{"injectables/ContentService.html":{}}}],["throws",{"_index":171,"title":{},"body":{"controllers/ContentController.html":{}}}],["timestamp",{"_index":404,"title":{},"body":{"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/SuccessResponseDTO.html":{}}}],["token",{"_index":415,"title":{},"body":{"injectables/ContentService.html":{}}}],["took",{"_index":520,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["total",{"_index":356,"title":{},"body":{"injectables/ContentService.html":{}}}],["totalpageresult",{"_index":361,"title":{},"body":{"injectables/ContentService.html":{}}}],["totalpageresult.error",{"_index":366,"title":{},"body":{"injectables/ContentService.html":{}}}],["totalpageresult.pages",{"_index":370,"title":{},"body":{"injectables/ContentService.html":{}}}],["totalpageresult.status",{"_index":363,"title":{},"body":{"injectables/ContentService.html":{}}}],["totalpages",{"_index":349,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":646,"title":{},"body":{"index.html":{}}}],["transform",{"_index":544,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["transformer",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":296,"title":{},"body":{"injectables/ContentService.html":{}}}],["transport.redis",{"_index":303,"title":{},"body":{"injectables/ContentService.html":{}}}],["true",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/SuccessResponseDTO.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":308,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ContentController.html":{},"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{},"classes/FailedExceptionDTO.html":{},"classes/FailedResponseDTO.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ReqestMiddleware.html":{},"classes/SuccessResponseDTO.html":{},"interfaces/ValidationPipeOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:[failedexceptiondto",{"_index":204,"title":{},"body":{"controllers/ContentController.html":{}}}],["type:[failedresponsedto",{"_index":203,"title":{},"body":{"controllers/ContentController.html":{}}}],["typealiases",{"_index":663,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":603,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["types/axios",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":335,"title":{},"body":{"injectables/ContentService.html":{}}}],["undefined",{"_index":169,"title":{},"body":{"controllers/ContentController.html":{}}}],["undefined})@apiresponse({status",{"_index":159,"title":{},"body":{"controllers/ContentController.html":{}}}],["unique",{"_index":443,"title":{},"body":{"classes/FailedExceptionDTO.html":{}}}],["unit",{"_index":641,"title":{},"body":{"index.html":{}}}],["unprocessable",{"_index":164,"title":{},"body":{"controllers/ContentController.html":{}}}],["up",{"_index":194,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["update",{"_index":276,"title":{},"body":{"injectables/ContentService.html":{}}}],["url",{"_index":305,"title":{},"body":{"injectables/ContentService.html":{},"injectables/LoggerInterceptor.html":{}}}],["use",{"_index":524,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["use(req",{"_index":525,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["useclass",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":228,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"injectables/ContentService.html":{}}}],["useful",{"_index":197,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["useguards",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":279,"title":{},"body":{"injectables/ContentService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["users",{"_index":150,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"miscellaneous/enumerations.html":{}}}],["using",{"_index":377,"title":{},"body":{"injectables/ContentService.html":{}}}],["utility",{"_index":314,"title":{},"body":{"injectables/ContentService.html":{}}}],["uuid",{"_index":533,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["v4",{"_index":532,"title":{},"body":{"injectables/ReqestMiddleware.html":{}}}],["valid",{"_index":434,"title":{},"body":{"injectables/ContentService.html":{}}}],["validationerror",{"_index":545,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["validationpipeoptions",{"_index":537,"title":{"interfaces/ValidationPipeOptions.html":{}},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["validator",{"_index":237,"title":{},"body":{"classes/ContentPaginatedDto.html":{},"interfaces/ValidationPipeOptions.html":{},"dependencies.html":{}}}],["validator.validation.ts",{"_index":540,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{},"coverage.html":{}}}],["validatoroptions",{"_index":541,"title":{},"body":{"interfaces/ValidationPipeOptions.html":{}}}],["value",{"_index":609,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.input.split(';')[0",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":669,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":390,"title":{},"body":{"injectables/ContentService.html":{}}}],["void",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"injectables/ReqestMiddleware.html":{}}}],["watch",{"_index":636,"title":{},"body":{"index.html":{}}}],["work",{"_index":431,"title":{},"body":{"injectables/ContentService.html":{}}}],["world",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicationLoggerModule.html":{},"modules/ContentModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                app\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get, Inject, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ConfigService } from '@nestjs/config';\nimport { ApplicationLoggerService } from 'src/logger/logger.service';\n\n@Controller('app')\nexport class AppController {\n\n  constructor(private readonly appService: AppService, private appLogger: ApplicationLoggerService) {\n   this.appLogger.setContext('AppController')\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nApplicationLoggerModule\n\nApplicationLoggerModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApplicationLoggerModule->AppModule\n\n\n\n\n\nContentModule\n\nContentModule\n\nAppModule -->\n\nContentModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nContentService\n\nContentService\n\nAppModule -->\n\nContentService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            ContentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            ContentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApplicationLoggerModule\n                        \n                        \n                            ContentModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.module.ts:33\n                \n            \n\n\n            \n                \n                    Adding middleware configuration\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, MiddlewareConsumer } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { ApplicationLoggerModule } from '../logger/logger.module';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { HttpErrorFilter } from 'src/shared/filter/http-error.util';\nimport { LoggerInterceptor } from 'src/logger/logger.interceptor';\nimport { ReqestMiddleware } from 'src/shared/middlewares';\nimport { ConfigModule } from '@nestjs/config';\nimport { dbconfig } from 'src/shared/config/database.config';\nimport { ContentController } from 'src/content/content.controller';\nimport { AppService } from './app.service';\nimport { ContentService } from 'src/content/content.service';\nimport { ContentModule } from 'src/content/content.module';\n\n@Module({\n  imports: [ApplicationLoggerModule, ContentModule, ConfigModule.forRoot({\n    isGlobal: true,\n    load: [dbconfig]\n  })],\n  controllers: [AppController, ContentController],\n  providers: [AppService, ContentService, {\n    provide: APP_FILTER,\n    useClass: HttpErrorFilter\n  }, {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggerInterceptor\n    }],\n})\nexport class AppModule {\n  /**\n   * Adding middleware configuration\n   */\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(ReqestMiddleware)\n      .forRoutes('*');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchContent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appLogger: ApplicationLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appLogger\n                                                  \n                                                        \n                                                                        ApplicationLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchContent\n                        \n                        \n                    \n                \n            \n            \n                \nfetchContent()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { ApplicationLoggerService } from '../logger/logger.service';\n\n@Injectable()\nexport class AppService {\n\n  \n  constructor(private appLogger: ApplicationLoggerService){\n    this.appLogger.setContext('AppService')\n  }\n\n  fetchContent(): string {\n    this.appLogger.log('print hello')\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApplicationLoggerModule.html":{"url":"modules/ApplicationLoggerModule.html","title":"module - ApplicationLoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    ApplicationLoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApplicationLoggerModule\n\n\n\ncluster_ApplicationLoggerModule_exports\n\n\n\ncluster_ApplicationLoggerModule_providers\n\n\n\n\nApplicationLoggerService \n\nApplicationLoggerService \n\n\n\nApplicationLoggerModule\n\nApplicationLoggerModule\n\nApplicationLoggerService  -->\n\nApplicationLoggerModule->ApplicationLoggerService \n\n\n\n\n\nApplicationLoggerService\n\nApplicationLoggerService\n\nApplicationLoggerModule -->\n\nApplicationLoggerService->ApplicationLoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApplicationLoggerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApplicationLoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {ApplicationLoggerService} from './logger.service';\n\n@Module({\n  providers: [ApplicationLoggerService],\n  exports: [ApplicationLoggerService],\n})\nexport class ApplicationLoggerModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApplicationLoggerService.html":{"url":"injectables/ApplicationLoggerService.html","title":"injectable - ApplicationLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApplicationLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, Scope, Logger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class ApplicationLoggerService extends Logger {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContentController.html":{"url":"controllers/ContentController.html","title":"controller - ContentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/content/content.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                content\n            \n\n            \n                Description\n            \n            \n                Content controller responsible for handling routes related to content\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearContent\n                            \n                            \n                                    Async\n                                fetchContent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearContent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearContent()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/clearCache')@ApiOperation({summary: 'Clears all the content from the REDIS. Not available from the consumer'})@ApiResponse({status: 200, description: 'Content cleared successfully.'})\n                \n            \n\n            \n                \n                    Defined in src/content/content.controller.ts:58\n                \n            \n\n\n            \n                \n                    Endpoint to clear the cache from the REDIS if present any\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        IGenericSuccessResponse  {status: true}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchContent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchContent(body: ContentPaginatedDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/fetch')@ApiOperation({summary: 'Fetch users or repositories from github. Return cached response if already present in REDIS'})@ApiResponse({status: 403, description: 'Forbidden.', type: undefined})@ApiResponse({status: 404, description: 'API not found.', type: undefined})@ApiResponse({status: 422, description: 'Unprocessable entity.', type: undefined})@ApiResponse({status: 400, description: 'Unprocessable entity.', type: undefined})@ApiResponse({status: 200, description: 'Successful fetched content.', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/content/content.controller.ts:44\n                \n            \n\n\n            \n                \n                    Endpoint to fetch the users and repositories from the github API.\nThrows HTTPException at 400 status code with type FailedExceptionDTO\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ContentPaginatedDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : ContentPaginatedDto {type, page, searchkey}\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        SuccessResponseDTO | SuccessResponseDTO\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Query, Delete, Body } from \"@nestjs/common\";\nimport { ContentService } from \"./content.service\";\nimport {\n    ApiOperation,\n    ApiResponse,\n    ApiTags\n} from '@nestjs/swagger';\nimport { ApplicationLoggerService } from \"./../logger/logger.service\";\nimport { ContentPaginatedDto } from \"./content.dto\";\nimport { SuccessResponseDTO, FailedResponseDTO, FailedExceptionDTO } from \"./../shared/dto/response.dto\";\nimport { IGenericSuccessResponse } from \"src/shared/interfaces/IGenericResponse\";\n\n/**\n * Content controller responsible for handling routes related to content\n */\n@ApiTags('content')\n@Controller('content')\nexport class ContentController {\n\n    constructor(private appLogger: ApplicationLoggerService, private contentService: ContentService) {\n        /**\n        * Setting up the logging context \n        * \n        * useful while debugging\n        */\n        this.appLogger.setContext('ContentController')\n    }\n    /**\n     * \n     * Endpoint to fetch the users and repositories from the github API.\n     * \n     * Throws HTTPException at 400 status code with type FailedExceptionDTO\n     * \n     * @param body : ContentPaginatedDto {type, page, searchkey}\n     * @returns SuccessResponseDTO | SuccessResponseDTO\n     */\n    @Post('/fetch')\n    @ApiOperation({ summary: 'Fetch users or repositories from github. Return cached response if already present in REDIS' })\n    @ApiResponse({ status: 403, description: 'Forbidden.', type:[FailedResponseDTO] })\n    @ApiResponse({ status: 404, description: 'API not found.', type:[FailedResponseDTO] })\n    @ApiResponse({ status: 422, description: 'Unprocessable entity.', type:[FailedResponseDTO] })\n    @ApiResponse({ status: 400, description: 'Unprocessable entity.', type:[FailedExceptionDTO] })\n    @ApiResponse({ status: 200, description: 'Successful fetched content.', type: [SuccessResponseDTO]  })\n    async fetchContent(@Body() body: ContentPaginatedDto ): Promise {\n        return this.contentService.fetchContent({...body})\n    }\n\n\n    /**\n     * \n     * Endpoint to clear the cache from the REDIS if present any\n     * \n     * @returns IGenericSuccessResponse  {status: true}\n     */\n    @Delete('/clearCache')\n    @ApiOperation({ summary: 'Clears all the content from the REDIS. Not available from the consumer' })\n    @ApiResponse({ status: 200, description: 'Content cleared successfully.'  })\n    async clearContent(): Promise {\n        return this.contentService.clearCache()\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContentModule.html":{"url":"modules/ContentModule.html","title":"module - ContentModule","body":"\n                   \n\n\n\n\n    Modules\n    ContentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ContentModule\n\n\n\ncluster_ContentModule_imports\n\n\n\ncluster_ContentModule_exports\n\n\n\ncluster_ContentModule_providers\n\n\n\n\nApplicationLoggerModule\n\nApplicationLoggerModule\n\n\n\nContentModule\n\nContentModule\n\nContentModule -->\n\nApplicationLoggerModule->ContentModule\n\n\n\n\n\nContentService \n\nContentService \n\nContentService  -->\n\nContentModule->ContentService \n\n\n\n\n\nContentService\n\nContentService\n\nContentModule -->\n\nContentService->ContentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/content/content.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContentService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApplicationLoggerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {ContentService} from './content.service';\nimport { ApplicationLoggerModule } from 'src/logger/logger.module';\n\n@Module({\n  imports:[ApplicationLoggerModule],\n  providers: [ContentService],\n  exports: [ContentService],\n})\nexport class ContentModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContentPaginatedDto.html":{"url":"classes/ContentPaginatedDto.html","title":"class - ContentPaginatedDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContentPaginatedDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/content/content.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                page\n                            \n                            \n                                searchkey\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Page number for which content will be fetched. Default :1 '})@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/content/content.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchkey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Search key which will be used to search the content'})@IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/content/content.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EContentType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({enum: EContentType, description: 'Entity type against which search will be implemented'})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/content/content.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { EContentType } from './../shared/interfaces/EContentType';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ContentPaginatedDto {\n\n    @ApiProperty({type: String, description:\"Page number for which content will be fetched. Default :1 \"})\n    @IsString()\n    page: string;\n\n    @ApiProperty({enum: EContentType, description:\"Entity type against which search will be implemented\"})\n    @IsNotEmpty()\n    type: EContentType;\n\n    @ApiProperty({description:\"Search key which will be used to search the content\"})\n    @IsNotEmpty()\n    @IsString()\n    searchkey: string\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContentService.html":{"url":"injectables/ContentService.html","title":"injectable - ContentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ContentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/content/content.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cacheContent\n                            \n                            \n                                    Async\n                                clearCache\n                            \n                            \n                                constructFinalAPI\n                            \n                            \n                                    Async\n                                fetchContent\n                            \n                            \n                                    Async\n                                fetchUserDetails\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appLogger: ApplicationLoggerService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/content/content.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appLogger\n                                                  \n                                                        \n                                                                        ApplicationLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            cacheContent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cacheContent(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/content/content.service.ts:159\n                \n            \n\n\n            \n                \n                    Helper method to find the already saved content if present\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearCache\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/content/content.service.ts:244\n                \n            \n\n\n            \n                \n                    API to clear the cache from REDIS\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        IGenericSuccessResponse\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            constructFinalAPI\n                        \n                        \n                    \n                \n            \n            \n                \nconstructFinalAPI(params: ContentPaginatedDto)\n                \n            \n\n\n            \n                \n                    Defined in src/content/content.service.ts:215\n                \n            \n\n\n            \n                \n                    Function to return final API based on the type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ContentPaginatedDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : ContentPaginatedDto  {type, searchkey, page}\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string final API which can be used by axios \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchContent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchContent(params: ContentPaginatedDto)\n                \n            \n\n\n            \n                \n                    Defined in src/content/content.service.ts:41\n                \n            \n\n\n            \n                \n                    Function responsible for fetching the content from Github and set it in REDIS\nif cache found then it returns result from cache \nelse new API request is made\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ContentPaginatedDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : ContentPaginatedDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        data: SuccessResponseDTO | FailedResponseDTO\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchUserDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchUserDetails(items: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/content/content.service.ts:180\n                \n            \n\n\n            \n                \n                    Update the details for each user returned from the search API\nBase search API doesn't return location, name and other information. \nIt will update item details as \"call by reference\"\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    items\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            client\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ClientProxy\n\n                        \n                    \n                        \n                            \n                                    Defined in src/content/content.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport axios from 'axios';\nimport { ApplicationLoggerService } from './../logger/logger.service';\nimport { getTotalPages } from './../shared/utils/totalPages.util';\nimport { ContentPaginatedDto } from './content.dto';\nimport { EContentType } from './../shared/interfaces/EContentType';\nimport { apiUtil } from './../shared/utils/apitype.util';\nimport { ClientProxy, ClientProxyFactory, Transport } from '@nestjs/microservices';\nimport { SuccessResponseDTO, FailedResponseDTO } from './../../src/shared/dto/response.dto';\nimport { IGenericSuccessResponse, IGenericFailureResponse, IGenericResponse } from 'src/shared/interfaces/IGenericResponse';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class ContentService {\n\n  private client: ClientProxy\n\n  constructor(private appLogger: ApplicationLoggerService, private configService: ConfigService) {\n    /**\n    * Setting up the logging context \n    * useful while debugging\n    */\n    this.client = ClientProxyFactory.create({\n      transport: Transport.REDIS, options: {\n        url: process.env.REDIS_SERVER,\n      }\n    })\n    this.appLogger.setContext('ContentService')\n  }\n  /**\n   * \n   * Function responsible for fetching the content from Github and set it in REDIS\n   * \n   * if cache found then it returns result from cache \n   * \n   * else new API request is made\n   * \n   * @param params : ContentPaginatedDto\n   * @returns data: SuccessResponseDTO | FailedResponseDTO\n   */\n  async fetchContent(params: ContentPaginatedDto): Promise {\n    try {\n      const {type} = params\n\n      /**\n       * Contruct the final api based on the type, user selected\n       */\n      let finalApi = this.constructFinalAPI(params)\n\n      /**\n       * Utility to check for data to exist in redis or not\n       */\n      const cacheResult = await this.cacheContent(finalApi)\n\n      /**\n       * Return the cache data which returned from REDIS\n       */\n      if (cacheResult.status) {\n        return { status: true, content: cacheResult.data };\n      }\n\n      /**\n       * If no cache found, then\n       * Make the API request to fetch the content\n       */\n\n      const result = await axios.request({\n        method: 'GET',\n        baseURL: finalApi\n      })\n\n      /**\n       * Check for result status, if it is not 200 then API failed with exception\n       */\n      if (result.status !== HttpStatus.OK) {\n        throw new Error(\"Request failed\")\n      }\n\n      /**\n       * Destructure data from result\n       */\n      const { data } = result;\n\n      /**\n       * If type is Users, then more details about the user needs to be fetched to show on UI\n       * Hence pass the items as call by reference and append the extra info from the user profile\n       * Note: Appending extra info done at backend to cache the request for subsequent calls \n       */\n      if (type === EContentType.user) {\n        await this.fetchUserDetails(data.items)\n      }\n\n      let totalPages = 0\n      /**\n       * Github API respond with link tag if more than 1 page exists for the result.\n       * Hence to make API paginated, total number of pages should be parsed from the link tag\n       */\n      if (result.headers.link) {\n        /**\n         * Utility function to parse the link tag and return the total number of pages\n         */\n        const totalPageResult = getTotalPages(result.headers.link)\n\n        if (!totalPageResult.status) {\n          this.appLogger.error('Exception in finding the total pages ', totalPageResult.error)\n        }\n\n        /**\n         * Totalpages can be used by consumer to implement infinite scroll or paginated scroll\n         */\n        totalPages = totalPageResult.pages\n      }\n\n      /**\n       * Prepare the content object which will be consumed by the endpoint\n       * \n       */\n      const content = { ...result.data, totalPages }\n\n      /**\n       * save the prepared content to redis using emitter pattern: fire and forget strategy\n       * Same content will be parsed from the cache \n       */\n      this.client.emit('cacheContent', { key: finalApi, data: JSON.stringify(content) })\n\n      return { status: true, content };\n    } catch (err) {\n      /**\n       * Log the error via custom logger built which will beautify the log error message\n       */\n      this.appLogger.error(`Error in Contentservice ${err}`)\n\n      /**\n       * Throw HTTP Exception which will be handled by custom HTTPErrorFilter middleware\n       * \n       * Formatted exception will be sent to the consumer of the end point.\n       * \n       * @example\n       * {\n       *   \"status\": false,\n       *   \"error\": \"string\",\n       *   \"code\": {},\n       *   \"timestamp\": \"string\",\n       *   \"path\": \"string\",\n       *   \"method\": \"string\",\n       *   \"requestId\": \"string\",\n       *   \"message\": \"string\"\n       * }\n       * \n       */\n      throw new HttpException(`Error in Contentservice ${err}`, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n\n  /**\n   * Helper method to find the already saved content if present\n   */\n  async cacheContent(key: string): Promise {\n    return new Promise((resolve) => {\n      this.client.send('fetchContent', { key }).subscribe((data) => {\n        if (data) {\n          resolve({ status: true, data: JSON.parse(data) })\n        }\n        resolve({ status: false })\n      }, (error) => {\n        resolve({ status: false, error })\n      });\n    })\n  }\n\n  /**\n   * Update the details for each user returned from the search API\n   * \n   * Base search API doesn't return location, name and other information. \n   * \n   * It will update item details as \"call by reference\"\n   * @params items: Array[]\n   */\n  async fetchUserDetails(items: Array) {\n    /**\n     * Set authorized token if present\n     */\n    const token = this.configService.get(\"AUTH_TOKEN\")\n    let headers = {\n      'User-Agent': 'github-searcher'\n    }\n    if (token) {\n      headers['Authorization'] = `token ${token}`\n    }\n    await Promise.all(\n      items.map(async (item) => {\n        try {\n          const profile = await axios.request({\n            method: 'GET',\n            baseURL: item.url,\n            headers: {\n              ...headers\n            }\n          })\n          item.detailInfo = profile.data\n        } catch (err) {\n          throw new Error(err.message)\n        }\n      })\n    )\n  }\n\n\n  /**\n   * Function to return final API based on the type\n   * @param params: ContentPaginatedDto  {type, searchkey, page}\n   * @returns string final API which can be used by axios \n   */\n  constructFinalAPI(params: ContentPaginatedDto): string{\n      const {type, searchkey, page} = params;\n      if (type === EContentType.user) {\n        /**\n         * Users\n         */\n        let finalApi = apiUtil[type]\n        return finalApi += `?q=${searchkey}+type:user&page=${parseInt(page)}`\n      } else if (type === EContentType.respository) {\n        /**\n        * Repositories\n        */\n        let finalApi = apiUtil[type]\n        return finalApi += `?q=${searchkey}&page=${parseInt(page)}`\n      } else {\n        /**\n         * If neither Users nor Repositories, \n         * then search should not work as per the scope, hence throw exception\n         */\n        throw new Error(\"Type must be valid either Users or Repositories\")\n      }\n  }\n\n  /**\n   * \n   * API to clear the cache from REDIS\n   * \n   * @returns IGenericSuccessResponse\n   */\n  async clearCache(): Promise {\n    this.client.emit('clearCache', {})\n    return { status: true, data: null }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FailedExceptionDTO.html":{"url":"classes/FailedExceptionDTO.html","title":"class - FailedExceptionDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FailedExceptionDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/response.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FailedResponseDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                message\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                            \n                                requestId\n                            \n                            \n                                timestamp\n                            \n                            \n                                error\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'HTTP status code'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Exception message'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            method\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'API RESTful method type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'API endpoint'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Unique request ID'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'API timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Failed response error message'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FailedResponseDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         FailedResponseDTO:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, description: 'Failed response status', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FailedResponseDTO\n\n                                \n                            \n                        \n                            \n                                    Defined in         FailedResponseDTO:17\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { HttpStatus } from \"@nestjs/common\";\n\n\nexport class SuccessResponseDTO{\n\n    @ApiProperty({type: Boolean, description:\"Successful response status\"})\n    status: true;\n\n    @ApiProperty({type: Object, description:\"Successful response content\"})\n    content: object;\n\n}\n\nexport class FailedResponseDTO{\n    @ApiProperty({type: Boolean, description:\"Failed response status\", default: false})\n    status: false;\n\n    @ApiProperty({type: String, description:\"Failed response error message\"})\n    error: string;\n\n}\n\nexport class FailedExceptionDTO extends FailedResponseDTO{\n        @ApiProperty({description:\"HTTP status code\"})\n        code: string | number;\n\n        @ApiProperty({description:\"API timestamp\"})\n        timestamp: string\n\n        @ApiProperty({description:\"API endpoint\"})\n        path: string\n\n        @ApiProperty({description:\"API RESTful method type\"})\n        method: string\n\n        @ApiProperty({description:\"Unique request ID\"})\n        requestId: string\n\n        @ApiProperty({description:\"Exception message\"})\n        message: string\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FailedResponseDTO.html":{"url":"classes/FailedResponseDTO.html","title":"class - FailedResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FailedResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Failed response error message'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, description: 'Failed response status', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { HttpStatus } from \"@nestjs/common\";\n\n\nexport class SuccessResponseDTO{\n\n    @ApiProperty({type: Boolean, description:\"Successful response status\"})\n    status: true;\n\n    @ApiProperty({type: Object, description:\"Successful response content\"})\n    content: object;\n\n}\n\nexport class FailedResponseDTO{\n    @ApiProperty({type: Boolean, description:\"Failed response status\", default: false})\n    status: false;\n\n    @ApiProperty({type: String, description:\"Failed response error message\"})\n    error: string;\n\n}\n\nexport class FailedExceptionDTO extends FailedResponseDTO{\n        @ApiProperty({description:\"HTTP status code\"})\n        code: string | number;\n\n        @ApiProperty({description:\"API timestamp\"})\n        timestamp: string\n\n        @ApiProperty({description:\"API endpoint\"})\n        path: string\n\n        @ApiProperty({description:\"API RESTful method type\"})\n        method: string\n\n        @ApiProperty({description:\"Unique request ID\"})\n        requestId: string\n\n        @ApiProperty({description:\"Exception message\"})\n        message: string\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filter/http-error.util.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(applicationLogger: ApplicationLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/filter/http-error.util.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        applicationLogger\n                                                  \n                                                        \n                                                                        ApplicationLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/filter/http-error.util.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ExceptionFilter, HttpException, ArgumentsHost, HttpStatus, Logger} from '@nestjs/common'\nimport { ApplicationLoggerService } from 'src/logger/logger.service'\nimport { exec } from 'child_process'\nimport { FailedExceptionDTO } from '../dto/response.dto'\n\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter{\n\n    constructor(private applicationLogger: ApplicationLoggerService){\n    }\n\n    catch(exception: HttpException, host: ArgumentsHost){\n        const ctx = host.switchToHttp()\n        const request = ctx.getRequest()\n        const response = ctx.getResponse()\n        const status = exception.getStatus ? exception.getStatus() : '5005'\n        const exceptionResponse : any = exception.getResponse ? exception.getResponse() : {error: 'Internal Server Error'}\n        /**\n         * prepare the custom error message\n         */\n        let error =  exceptionResponse && exceptionResponse.error \n        if(exceptionResponse.message){\n            error = error ? error+' => '+exceptionResponse.message: error\n        }\n        const errorResponseObject: FailedExceptionDTO ={\n            status: false,\n            code: status,\n            timestamp: new Date().toLocaleString(),\n            path: request.url,\n            method: request.method,\n            requestId: request.requestId,\n            message: status !== HttpStatus.INTERNAL_SERVER_ERROR ? exception.message : exception ? exception.message : 'Internal server error',\n            error\n            \n        }\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            this.applicationLogger.error(\n                'ExceptionFilter',\n              `${request.method} ${request.url}`,\n              exception.stack,\n            );\n          } else {\n            this.applicationLogger.error(\n                'ExceptionFilter',\n              `${request.method} ${request.url}`,\n              JSON.stringify(errorResponseObject),\n            );\n          }\n        response.status(404).json(errorResponseObject)\n        \n    }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor.html":{"url":"injectables/LoggerInterceptor.html","title":"injectable - LoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(applicationLogger: ApplicationLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logger.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        applicationLogger\n                                                  \n                                                        \n                                                                        ApplicationLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, call$: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logger.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    call$\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ApplicationLoggerService } from './logger.service';\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n\n    constructor(private applicationLogger: ApplicationLoggerService) {\n        this.applicationLogger.setContext('LoggerInterceptor')\n    }\n\n    intercept(\n        context: ExecutionContext,\n        call$: CallHandler,\n    ): Observable {\n        \n        const now = Date.now();\n        const req = context.switchToHttp().getRequest();\n        const method = req.method;\n        let body = req.body;\n        body = JSON.stringify(body)\n        const url = req.url;\n\n        return call$.handle().pipe(\n            tap(() => {\n                this.applicationLogger.log(\n                    `Request : ${req.requestId} ${method} ${url} ${body}, took ${Date.now() - now}ms`,\n                    context.getClass().name,\n                )\n            },\n            ),\n        );\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReqestMiddleware.html":{"url":"injectables/ReqestMiddleware.html","title":"injectable - ReqestMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ReqestMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/middlewares/request.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: CustomReq, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/middlewares/request.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CustomReq\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { v4 as uuid } from 'uuid';\n\ntype CustomReq = Request & {requestId: string}\n@Injectable()\nexport class ReqestMiddleware implements NestMiddleware {\n  use(req: CustomReq, res: Response, next: Function) {\n    req.requestId = uuid()\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SuccessResponseDTO.html":{"url":"classes/SuccessResponseDTO.html","title":"class - SuccessResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SuccessResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/dto/response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Object, description: 'Successful response content'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, description: 'Successful response status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/dto/response.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { HttpStatus } from \"@nestjs/common\";\n\n\nexport class SuccessResponseDTO{\n\n    @ApiProperty({type: Boolean, description:\"Successful response status\"})\n    status: true;\n\n    @ApiProperty({type: Object, description:\"Successful response content\"})\n    content: object;\n\n}\n\nexport class FailedResponseDTO{\n    @ApiProperty({type: Boolean, description:\"Failed response status\", default: false})\n    status: false;\n\n    @ApiProperty({type: String, description:\"Failed response error message\"})\n    error: string;\n\n}\n\nexport class FailedExceptionDTO extends FailedResponseDTO{\n        @ApiProperty({description:\"HTTP status code\"})\n        code: string | number;\n\n        @ApiProperty({description:\"API timestamp\"})\n        timestamp: string\n\n        @ApiProperty({description:\"API endpoint\"})\n        path: string\n\n        @ApiProperty({description:\"API RESTful method type\"})\n        method: string\n\n        @ApiProperty({description:\"Unique request ID\"})\n        requestId: string\n\n        @ApiProperty({description:\"Exception message\"})\n        message: string\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationPipeOptions.html":{"url":"interfaces/ValidationPipeOptions.html","title":"interface - ValidationPipeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValidationPipeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation/class-validator.validation.ts\n        \n\n\n            \n                Extends\n            \n            \n                    ValidatorOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        disableErrorMessages\n                                \n                                \n                                            Optional\n                                        exceptionFactory\n                                \n                                \n                                            Optional\n                                        transform\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disableErrorMessages\n                                    \n                                \n                                \n                                    \n                                        disableErrorMessages:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exceptionFactory\n                                    \n                                \n                                \n                                    \n                                        exceptionFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transform\n                                    \n                                \n                                \n                                    \n                                        transform:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorOptions } from \"class-validator\";\nimport { ValidationError } from \"@nestjs/common\";\n\nexport interface ValidationPipeOptions extends ValidatorOptions {\n    transform?: boolean;\n    disableErrorMessages?: boolean;\n    exceptionFactory?: (errors: ValidationError[]) => any;\n  }\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/content/content.controller.ts\n            \n            controller\n            ContentController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/content/content.dto.ts\n            \n            class\n            ContentPaginatedDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/content/content.service.ts\n            \n            injectable\n            ContentService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/logger/logger.interceptor.ts\n            \n            injectable\n            LoggerInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            ApplicationLoggerService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/config/database.config.ts\n            \n            variable\n            dbconfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/dto/response.dto.ts\n            \n            class\n            FailedExceptionDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/shared/dto/response.dto.ts\n            \n            class\n            FailedResponseDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/dto/response.dto.ts\n            \n            class\n            SuccessResponseDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/filter/http-error.util.ts\n            \n            class\n            HttpErrorFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/middlewares/request.middleware.ts\n            \n            injectable\n            ReqestMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/utils/apitype.util.ts\n            \n            variable\n            apiUtil\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/utils/totalPages.util.ts\n            \n            variable\n            getTotalPages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/validation/class-validator.validation.ts\n            \n            interface\n            ValidationPipeOptions\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/microservices : ^7.4.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.0\n        \n            @types/axios : ^0.14.0\n        \n            axios : ^0.19.2\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            crypto : ^1.0.1\n        \n            mariadb : ^2.4.2\n        \n            nestjs-redis : ^1.2.8\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            redis : ^3.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            sequelize-typescript : ^1.1.0\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EContentType   (src/.../EContentType.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/interfaces/EContentType.ts\n    \n        \n            \n                \n                    \n                        \n                        EContentType\n                    \n                \n                        \n                            \n                                 user\n                            \n                        \n                        \n                            \n                                Value : Users\n                            \n                        \n                        \n                            \n                                 respository\n                            \n                        \n                        \n                            \n                                Value : Repositories\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nIt is a nestjs based template which has features already plugged in to start the rapid development of any backend project\n\nCustom Logger\nSwagger\nPassport Authentication\nJWt based authentication\nAuthrization Gaurd\nTypeorm integration with Mariadb\nUser entity\nTest component (Above implementation with examples)\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covStay in touch\n\nAuthor - Sandeep Ghosh\n\nLicense\n  Nest is MIT licensed.\nnestjs-defacto-backend-template\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApplicationLoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApplicationLoggerModule\n\n\n\ncluster_ApplicationLoggerModule_exports\n\n\n\ncluster_ApplicationLoggerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ContentModule\n\n\n\ncluster_ContentModule_exports\n\n\n\n\nApplicationLoggerService \n\nApplicationLoggerService \n\n\n\nApplicationLoggerModule\n\nApplicationLoggerModule\n\nApplicationLoggerService  -->\n\nApplicationLoggerModule->ApplicationLoggerService \n\n\n\n\n\nContentModule\n\nContentModule\n\nContentModule -->\n\nApplicationLoggerModule->ContentModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApplicationLoggerModule->AppModule\n\n\n\n\n\nApplicationLoggerService\n\nApplicationLoggerService\n\nApplicationLoggerModule -->\n\nApplicationLoggerService->ApplicationLoggerModule\n\n\n\nAppModule -->\n\nContentModule->AppModule\n\n\n\n\n\nContentService \n\nContentService \n\nContentService  -->\n\nContentModule->ContentService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nContentService\n\nContentService\n\nContentModule -->\n\nContentService->ContentModule\n\n\n\nAppModule -->\n\nContentService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CustomReq   (src/.../request.middleware.ts)\n                        \n                        \n                            IGenericFailureResponse   (src/.../IGenericResponse.ts)\n                        \n                        \n                            IGenericResponse   (src/.../IGenericResponse.ts)\n                        \n                        \n                            IGenericSuccessResponse   (src/.../IGenericResponse.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/middlewares/request.middleware.ts\n    \n    \n        \n            \n                \n                    \n                    CustomReq\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shared/interfaces/IGenericResponse.ts\n    \n    \n        \n            \n                \n                    \n                    IGenericFailureResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IGenericResponse\n                \n            \n            \n                \n                        IGenericSuccessResponse | IGenericFailureResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IGenericSuccessResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            apiUtil   (src/.../apitype.util.ts)\n                        \n                        \n                            dbconfig   (src/.../database.config.ts)\n                        \n                        \n                            getTotalPages   (src/.../totalPages.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/utils/apitype.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            apiUtil\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    [EContentType.user] : 'https://api.github.com/search/users',\n    [EContentType.respository] : 'https://api.github.com/search/repositories'\n}\n                        \n                    \n\n\n            \n        \n\n    src/shared/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dbconfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => ({\n\n    database: {\n        DB_TYPE: process.env.DB_TYPE,\n        DB_HOST: process.env.DB_HOST,\n        DB_PORT: Number(process.env.DB_PORT),\n        DB_USERNAME: process.env.DB_USERNAME,\n        DB_PASSWORD: process.env.DB_PASSWORD,\n        DB_DATABASE: process.env.DB_DATABASE\n    }\n})\n                        \n                    \n\n\n            \n        \n\n    src/shared/utils/totalPages.util.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getTotalPages\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (data: string): {status: boolean, pages: number, error?: string} => {\n    try{\n        let arr = data.split(',')\n        let totalPages = 0\n        const regex = new RegExp('rel=\"last\"')\n        arr.forEach(link => {\n            var value = regex.exec(link)\n            if (value) {\n                let nvalue = value.input.split(';')[0]\n                let innerRegex = new RegExp(/&page=[0-9]{1,}/);\n                var final = nvalue.match(innerRegex)\n                if (final) {\n                    let nfinal = final[0].split(\"=\")[1]\n                    totalPages = parseInt(nfinal)\n                }\n            }\n        });\n        return {status: true,  pages: totalPages}\n    }catch(err){\n        return {status: true,  pages: 0, error: err.message}\n    }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
